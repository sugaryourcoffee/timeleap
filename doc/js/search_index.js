var search_data = {"index":{"searchIndex":["syctimeleap","timeleap","add()","method_missing()","new()","next_weekday()","next_weekday_in()","weekday()","license"],"longSearchIndex":["syctimeleap","syctimeleap::timeleap","syctimeleap::timeleap#add()","syctimeleap::timeleap#method_missing()","syctimeleap::timeleap::new()","syctimeleap::timeleap#next_weekday()","syctimeleap::timeleap#next_weekday_in()","syctimeleap::timeleap#weekday()",""],"info":[["SycTimeleap","","SycTimeleap.html","","<p>Provides date operations like in_1_day\n"],["SycTimeleap::TimeLeap","","SycTimeleap/TimeLeap.html","","<p>Base class for date operations\n"],["add","SycTimeleap::TimeLeap","SycTimeleap/TimeLeap.html#method-i-add","(direction, count, distance)","<p>Determines whether to move back or forward in time and returns the distance\nin days, weeks, months or …\n"],["method_missing","SycTimeleap::TimeLeap","SycTimeleap/TimeLeap.html#method-i-method_missing","(name, *args)","<p>Provides the date calculation methods dynamically\n"],["new","SycTimeleap::TimeLeap","SycTimeleap/TimeLeap.html#method-c-new","(date = Time.now.to_date)","<p>Creates a new Temp and initializes it with the current date if no date is\nprovided\n"],["next_weekday","SycTimeleap::TimeLeap","SycTimeleap/TimeLeap.html#method-i-next_weekday","(direction, abbreviated_weekday)","<p>Returns the next or previous weekday Exampel: next_monday or n_mo Su Mo Tu\nWe Th Fr Sa\n\n<pre>0  1  2  3  4  ...</pre>\n"],["next_weekday_in","SycTimeleap::TimeLeap","SycTimeleap/TimeLeap.html#method-i-next_weekday_in","(weekday_abbreviation, direction, count, distance)","<p>Returns the next weekday in n days, weeks, month or years Example:\nmonday_in_3_weeks or mo_i_3_w\n"],["weekday","SycTimeleap::TimeLeap","SycTimeleap/TimeLeap.html#method-i-weekday","(weekday)","<p>Returns yesterday, today or tomorrow\n"],["LICENSE","","LICENSE.html","","<p>The MIT License (MIT)\n<p>Copyright © 2014 Pierre Sugar\n<p>Permission is hereby granted, free of charge, to …\n"]]}}